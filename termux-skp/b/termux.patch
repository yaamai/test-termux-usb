--- a/sk-usbhid.c	2025-04-26 11:52:37.500314960 +0900
+++ b/sk-usbhid.c	2025-04-26 12:05:15.257333071 +0900
@@ -175,6 +175,15 @@ sk_open(const char *path)
 	struct sk_usbhid *sk;
 	int r;
 
+  hid_init();
+
+  fido_dev_io_t io = {
+		&fido_termux_open,
+		&fido_termux_close,
+		&fido_termux_read,
+		&fido_termux_write,
+	};
+
 	if (path == NULL) {
 		skdebug(__func__, "path == NULL");
 		return NULL;
@@ -194,6 +203,9 @@ sk_open(const char *path)
 		free(sk);
 		return NULL;
 	}
+
+  fido_dev_set_io_functions(sk->dev, &io);
+
 	if ((r = fido_dev_open(sk->dev, sk->path)) != FIDO_OK) {
 		skdebug(__func__, "fido_dev_open %s failed: %s", sk->path,
 		    fido_strerr(r));
@@ -561,39 +573,13 @@ static struct sk_usbhid *
 sk_probe(const char *application, const uint8_t *key_handle,
     size_t key_handle_len, int probe_resident)
 {
-	struct sk_usbhid *sk;
-	fido_dev_info_t *devlist;
-	size_t ndevs;
-	int r;
+  int rc = 0;
+  char path[1024];
+  if ((rc = termux_get_first_usb_device_path(path, sizeof(path))) < 0) {
+    return NULL;
+  }
 
-#ifdef HAVE_CYGWIN
-	if (!probe_resident && (sk = sk_open("windows://hello")) != NULL)
-		return sk;
-#endif /* HAVE_CYGWIN */
-	if ((devlist = fido_dev_info_new(MAX_FIDO_DEVICES)) == NULL) {
-		skdebug(__func__, "fido_dev_info_new failed");
-		return NULL;
-	}
-	if ((r = fido_dev_info_manifest(devlist, MAX_FIDO_DEVICES,
-	    &ndevs)) != FIDO_OK) {
-		skdebug(__func__, "fido_dev_info_manifest failed: %s",
-		    fido_strerr(r));
-		fido_dev_info_free(&devlist, MAX_FIDO_DEVICES);
-		return NULL;
-	}
-	skdebug(__func__, "%zu device(s) detected", ndevs);
-	if (ndevs == 0) {
-		sk = NULL;
-	} else if (application != NULL && key_handle != NULL) {
-		skdebug(__func__, "selecting sk by cred");
-		sk = sk_select_by_cred(devlist, ndevs, application, key_handle,
-		    key_handle_len);
-	} else {
-		skdebug(__func__, "selecting sk by touch");
-		sk = sk_select_by_touch(devlist, ndevs);
-	}
-	fido_dev_info_free(&devlist, MAX_FIDO_DEVICES);
-	return sk;
+  return sk_open(path);
 }
 
 #ifdef WITH_OPENSSL
